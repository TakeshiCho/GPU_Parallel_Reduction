#pragma kernel PixelsParallelReduction
#pragma multi_compile_local _ _STEP_FIRST _THREAD_128 _THREAD_64 _THREAD_32 _THREAD_16 _THREAD_8 _THREAD_4 _THREAD_2
#pragma multi_compile_local _ _FUNC_ADD _FUNC_MAX _FUNC_MIN

#include "PixelsParallelReductionHeader.hlsl"

Texture2D<float> Source;
uint current_count;
float4 Source_Size;
#define PIXEL_WIDTH ((uint)Source_Size.x)
#define PIXEL_HEIGHT ((uint)Source_Size.y)
#define PIXEL_COUNT ((uint)Source_Size.z)

RWStructuredBuffer<int> Global_Cache;
groupshared int Group_Cache[_THREAD];

struct threadData
{
    uint id             : SV_DispatchThreadID;
    uint group_id       : SV_GroupID;
    uint group_index    : SV_GroupIndex;
};

[numthreads(_THREAD,1,1)]
void PixelsParallelReduction (threadData thread)
{
    const uint tid = thread.id;
    const uint gid = thread.group_id;
    const uint index = thread.group_index;
    
#ifdef _STEP_FIRST
    uint2 p_id_0 = uint2(tid * 2  % PIXEL_WIDTH, tid * 2 / PIXEL_HEIGHT);
    uint2 p_id_1 = uint2((tid * 2 + 1) % PIXEL_WIDTH, (tid * 2 + 1) / PIXEL_HEIGHT);
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Source, p_id_0, p_id_1) * 255;
#else
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Global_Cache, tid * 2 , tid * 2 + 1);
#endif
    GroupMemoryBarrierWithGroupSync();
    
#if _THREAD > 256
    if (index < 256)                                     
        Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 256);
    GroupMemoryBarrierWithGroupSync();
#endif
#if _THREAD > 128
    if (index < 128)                                     
        Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 128);
    GroupMemoryBarrierWithGroupSync();
#endif
#if _THREAD > 64
    if (index < 64)                                     
        Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 64);
    GroupMemoryBarrierWithGroupSync();
    if (index >= 32)
        return;
#endif
#if _THREAD > 32
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 32);
    GroupMemoryBarrier();
#endif
#if _THREAD > 16
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 16);
    GroupMemoryBarrier();
#endif
#if _THREAD > 8
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 8);
    GroupMemoryBarrier();
#endif
#if _THREAD > 4
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 4);
    GroupMemoryBarrier();
#endif
#if _THREAD > 2
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 2);
    GroupMemoryBarrier();
#endif
#if _THREAD > 1
    Group_Cache[index] = PARALLEL_REDUCTION_FUNC(Group_Cache, index, index + 1);
#endif
    
    if (index > 0)
        return;
    
    Global_Cache[gid] = Group_Cache[0];
}